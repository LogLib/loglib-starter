// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model WebUser {
    id        String   @id @default(cuid())
    data      String   @default("{}")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    Session  WebSession[]
    Pageview WebPageview[]
    WebEvent WebEvent[]

    @@map("web_user")
}

model WebSession {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @updatedAt @map("updated_at")
    referrer    String        @default("")
    queryParams String        @default("") @map("query_params")
    duration    Int           @default(0)
    country     String?
    city        String?
    device      String?
    os          String?
    browser     String?
    language    String?
    userId      String        @map("user_id")
    Page        WebPageview[]

    User     WebUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
    WebEvent WebEvent[]

    @@map("web_session")
}

model WebPageview {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    page        String
    referrer    String   @default("")
    queryParams String   @default("{}") @map("query_params")
    duration    Int      @default(0)
    sessionId   String   @map("web_session_id")
    userId      String   @map("user_id")

    Event      WebEvent[]
    WebSession WebSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    User       WebUser    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("web_pageview")
}

model WebEvent {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    eventType String   @map("event_type")
    eventName String   @map("event_name")
    payload   String   @default("")
    pageId    String   @map("page_id")
    sessionId String   @map("web_session_id")
    userId    String   @map("user_id")

    Page       WebPageview @relation(fields: [pageId], references: [id], onDelete: Cascade)
    User       WebUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
    WebSession WebSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    @@map("web_event")
}
